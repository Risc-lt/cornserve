syntax = "proto3";

package cornserve.worker;

import "common.proto";

service Worker {
  // Worker lifecycle management
  rpc Adopt(AdoptRequest) returns (AdoptResponse);
  rpc Free(FreeRequest) returns (FreeResponse);
  
  // Executor management
  rpc LaunchExecutor(LaunchExecutorRequest) returns (LaunchExecutorResponse);
  
  // Health checking
  rpc Healthcheck(HealthcheckRequest) returns (HealthcheckResponse);
}

// Worker adoption
message AdoptRequest {
  string task_manager_id = 1;  // ID of the adopting task manager
}

message AdoptResponse {
  common.Status status = 1;
  string message = 2;
}

// Worker release
message FreeRequest {}

message FreeResponse {
  common.Status status = 1;
  string message = 2;
}

// Executor management
message ExecutorDescriptor {
  string task_id = 1;
  string model_path = 2;
  map<string, string> config = 3;  // Executor-specific configuration
  
  // Parallelism configuration
  int32 tensor_parallel_degree = 4;
  int32 pipeline_parallel_degree = 5;
}

message LaunchExecutorRequest {
  ExecutorDescriptor descriptor = 1;
}

message LaunchExecutorResponse {
  string executor_id = 1;
  common.Status status = 2;
  string message = 3;
}

// Health checking
message ExecutorStatus {
  common.Status status = 1;
}

message HealthcheckRequest {}

message HealthcheckResponse {
  common.Status status = 1;
  ExecutorStatus executor_status = 2;
}
